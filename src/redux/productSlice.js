// counterSlice.js
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { api } from "./api";
// import { fetchCount } from "./counterAPI";
const initialState = {
  products: [],
  loading: false,
};

// asynchronous function with createAsyncThunk
export const getProductAsync = createAsyncThunk(
  "product/fetchProducts",
  async (amount, { rejectWithValue }) => {
    try {
      const url = "http://localhost:3004/products";
      const res = await fetch(url);
      const data = await res.json();
      return data;
    } catch (err) {
      return rejectWithValue(err);
    }
  }
);

// Redux Toolkit slice
export const productSlice = createSlice({
  name: "product",
  initialState,
  reducers: {
    setProduct: (state, action) => {
      state.products = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getProductAsync.pending, (state) => {
        state.loading = true;
      })
      .addCase(getProductAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.products = action.payload;
      })
      .addCase(getProductAsync.rejected, (state, action) => {
        state.loading = false;
        console.log(action.payload);
        // state.products = [];
      })
      .addMatcher(api.endpoints.getProducts.matchFulfilled, (state, action) => {
        // Lưu thông tin user vào state
        state.products = action.payload;
      });
  },
});
export const { setProduct } = productSlice.actions;
export default productSlice.reducer;
